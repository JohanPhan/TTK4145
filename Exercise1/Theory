Task 3:
	Concurrency vs. Parallelism:
		Concurrency is in a way a virtual form of parallelism. It means that process can start, run and stop 
		regardless of other processes. Typically implemented using threads on a single-core processor.

		Parallelism is when tasks run at literally the same time, eg. when you have a multi-core processor. 
	
	Why are multicore machines becoming more popular?
		Increased efficiency. 
	
	What kinds of problems motivates the need for concurrent execution? 
		Any problems where multiple things are happening at the same time. Eg. when two clients are 
		trying to access a server at the same time. 

	Does creating concurrent programs make the programmer's life easier? 
		Both. Situations that require concurrency are easier to solve, however it introduces more
		complexity to the system and introduces its own set of issues.

	What are the differences between processes, threads, green threads, and coroutines?
		SKIP

	Which one of these do pthread_create() (C/POSIX), threading.Thread() (Python), go (Go) create?
		pthread_create():
			Creates a thread.
		threading.Thread():
			Creates a thread.
		go:
			Spawns a goroutine, a hybrid of threads and coroutines. 

	How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves?:
		CPythons memory management is not thread-safe, thus the GIL is needed to prevent multiple threads from
		running the same bytecode. 

	With this in mind: What is the workaround for the GIL?
		By using the multiprocessing package one can side-step the GIL by using subprocesses instead of threads.

	What does func GOMAXPROCS(n int) int change?:
		It sets the maximum number of CPUs that can be executing simultaneously. 

Task 4:
	When we run the code we see that the result is "never" 0, it's some number between -1 000 000 and 1 000 000.
	This is because there's no control over the concurrency. 